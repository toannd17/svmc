Pizza Location
Our friend Picko is very reach and he wants to open lots of restaurants with delivery. The main food will be, of course, pizza. He has certain number of potential locations for the restaurants, and he knows the locations of the solitaires with lots of people which will often be his customers. Delivery of each restaurant will cover all the solitaires in given radius.

Picko can open only limited number of restaurants, and he wants that restaurants on the locations which will cover maximal number of people in solitaires.

Write a program that will calculate maximal number of people which we can cover with delivery.

 

Input

In the first line of the input file there are two integers K and R, separated with space, number of restaurants and radius of delivery, 1 ≤ K ≤ 10, 1 ≤ R ≤ 500.

In the second line there is integer M, number of locations, K ≤ M ≤ 20.

In each of the next M lines there are two integer X and Y, separated with space, coordinates of each location, -1000 ≤ X,Y ≤ 1000.

In the next line there is integer N, number of solitaires, 1 ≤ N ≤ 100.

In each of the next N lines there are three integers X, Y and S, separated with space, X and Y are coordinates of each solitaire, and S is number of people in that solitaire, -1000 ≤ X,Y ≤ 1000, 1 ≤ S ≤ 100.

We consider that solitaire is in radius of some restaurant if distance between them is less or equal to R. There are no two locations of restaurants on the same place.

 

Output

In only line of the output file we have to write maximal number from the text above.

 

Sample



Input

3

2 2

3

1 0

4 0

7 0

4

0 0 1

3 0 7

5 0 9

8 0 1

2 2

3

-2 0

0 1

3 0

8

-3 1 1

-3 0 1

-3 -1 1

-2 -1 1

0 0 3

0 2 1

2 1 3

4 0 2

3 3

5

0 0

1 6

2 3

6 6

7 2

8

0 1 2

0 5 3

0 6 1

1 0 1

3 2 3

3 6 2

6 2 4

8 6 3
///
code 
#include <iostream>
#pragma warning (disable:4996)
using namespace std;
int K, R, nloc, nsoli, answer;
int visit[21];
int matrix[101][101], visitHang[101];


struct rlocation {
	int x, y;
};
struct sloction {
	int x, y, s;
};

rlocation nhaHang[21];
sloction soli[101];
int tinh(int m, int n){
	int r = R*R;
	int tmp = 0;
	int x = soli[n].x - nhaHang[m].x;
	int y = soli[n].y - nhaHang[m].y;
	int c = x*x + y*y;
	if(c <= r){
		tmp = soli[n].s;
	}
	return tmp;
}

int pv(int i){
	int tmp = 0;
	for(int j = 0; j < nsoli; j++){
		if(matrix[i][j] != 0 && visitHang [j] == 0){
			tmp += matrix[i][j];
			visitHang[j] = 1;
		}
	}
	return tmp;
}



void back_track(int vtPtu, int k, int npv){
	if(k>=K){
		if(npv > answer){
			answer = npv;
		}
		return;
	}
	for(int i = vtPtu; i < nloc; i++){
		int bk[101] = {0};
		for(int k = 0; k < nsoli; k++){
			bk[k] = visitHang[k];
		}
		back_track(i+1, k+1, npv + pv(i));
		for(int k = 0; k < nsoli; k++){
			visitHang[k] = bk[k];
		}
	}
}

void BT_TCK(int vtPtu, int k, int npv){
	if(k>=K){
		if(npv > answer){
			answer = npv;
		}
		return;
	}
	for(int i = vtPtu; i < nloc; i++){
		int bk[101] = {0};
		for(int k = 0; k < nsoli; k++){
			bk[k] = visitHang[k];
		}
		BT_TCK(i+1, k+1, npv + pv(i));
		for(int k = 0; k < nsoli; k++){
			visitHang[k] = bk[k];
		}
	}
}



int main(){
	freopen("Text.txt", "r", stdin);
	int T; cin >> T;
	for(int tc = 1; tc <= T; tc++){
		cin >> K >> R;
		cin >> nloc;
		for(int i = 0; i < nloc; i++){
			cin >> nhaHang[i].x >> nhaHang[i].y;
			visit[i] = 0;
		}
		cin >> nsoli;
		for(int i = 0; i < nsoli; i++){
			visitHang[i] = 0;
			cin >> soli[i].x >> soli[i].y >> soli[i].s;
		}

		for(int i = 0; i < nloc; i++){
			for(int j = 0; j < nsoli; j++){
				int a = tinh(i, j);
				matrix[i][j] = a;




			}
		}
		answer = 0;
		back_track(0, 0, 0);
		//BT_TCK(0, 0, 0);
		cout << "#" << tc << " " << answer << endl;
	}
	return 0;
}
